
checkRow(robotRowNum, withinRow, data, video_capture) {
	if robotRowNum in data and withinRow is false
		redDetails = getRedDetails()
		while red is still found
			laneDetails = getLaneDetails(ignore the blue side where the red is found)
			if laneCheck(laneDetails) is true
				moveforward
			else
				stop moving 
			redDetails = getRedDetails()
		

}

laneCheck(laneDetails) {
	if lane dimensions are ok
		if centroid of lane not within bounds
			while not within bounds
				stop moving
				laneDetails = getLaneDetails()
				if centroid_x < left bound limit
					rotate to left 
				else
					rotate to right
		return True
	else
		return False
}

redCheck(redDetails) {
	if saw red and dimensions ok 
		foundRed = true
		if red within bounds 
			stop moving
			#check what it is for and do action 
			if withinRow == false 
				robotRowNum++
				withinRow = checkRow(robotRowNum, withinRow, data, video_capture);
			else 
				currDot++
				checkDot(robotRowNum, withinRow, data);
	else:
		foundRed = false
}

foundRed = false
withinRow = false
robotRowNum = 0

while true
	laneDetails = getLaneDetails()
	laneFound = laneCheck(laneDetails)
	
	if there is lane
		start moving 
		redDetails = getRedDetails()
		redFound = redCheck(redDetails)
	else 
		stop moving
		
=============================================================================================================================================================================


flags:
	- arguments
	- sawTrueRed
	- sawLane
	- masterOff
	- movementOverride
	- lastMovement
	- inLane
	- currentRow
	- currentDot
	- numberOfStopsForRow

files structure

main 
	redChecking 
	laneChecking 
	movement




=============================================================================================================================================================================
:::MOVING FORWARD LOGIC::::
:::::::::::::::::::::::::::::::::::::::::

while true
	laneDetails = getLaneDetails()
	if centroid is out of bounds
		stop moving
		while centroid is out of bounds
		movementOverride set to RED
			if centroid < left limit
				rotate to left
			else 
				rotate to right
		movementOverride set to null
	else
		move forward
		


=============================================================================================================================================================================
:::RED CHECK::::
:::::::::::::::::::::::::::::::::::::::::

goInsideLane() {
	while no green found {
		move forward
	}
	while found lane {
		rotate based on the placement of red 
	}
	while no lane found {
		rotate based on the placement of red
	}
}

while true
	redDetails = getRedDetails()
	if red meets required dimensions
		movementOverride set to RED
		stop the movement
		if inLane is true
			increment currentDot 
			if currentDot is in the list to go to based on the currentRow
				trigger the paper dispenser 
				decrement numberOfStopsForRow
				while the paper dispenser is still running
					pass
				
				if numberOfStopsForRow > 0 {
					while green not found {
						move forward
					}
				}
				else {
					while green not found {
						move forward
					}
				}
		else 
			increment currentRow
			if currentRow is in the list to go to
				perform goInsideLane process
				set inLane to true
				set currentDot to 0
				set numberOfStopsForRow to the value of the places in the respective row
			else
				move forward until you find the green ignoring the blue where the red is located
		movementOverride set to null

